G(((modexpstate1==modexpstate2) => (expregstatenext1==expregstatenext2)))
G(((expregstatenext1==expregstatenext2) => (bytecounter1==bytecounter2)))
G(((expregstate1==expregstate2) => (bytecounter1==bytecounter2)))
G(((modexpstate1==modexpstate2) => (bytecounternext1==bytecounternext2)))
G(((modexpstate1==modexpstate2) => (mulstatenext1==mulstatenext2)))
G(((modexpstate1==modexpstate2) => (expregstate1==expregstate2)))
G(((modexstatenext1==modexstatenext2) => (expregstatenext1==expregstatenext2)))
G(((modexstatenext1==modexstatenext2) => (mulstatenext1==mulstatenext2)))
G(((modexstatenext1==modexstatenext2) => (bytecounternext1==bytecounternext2)))
G(((modexstatenext1==modexstatenext2) => (expregstate1==expregstate2)))
G(((modexstatenext1==modexstatenext2) => (bytecounter1==bytecounter2)))
G(((expregstate1==expregstate2) => (bytecounternext1==bytecounternext2)))
G(((modexstatenext1==modexstatenext2) => (squarestatenext1==squarestatenext2)))
G(((expregstatenext1==expregstatenext2) => (bytecounternext1==bytecounternext2)))
G(((expregstatenext1==expregstatenext2) => (expregstate1==expregstate2)))
G(((modexstatenext1==modexstatenext2) => (mulstate1==mulstate2)))
G(((modexstatenext1==modexstatenext2) => (squarestate1==squarestate2)))
G(((modexpstate1==modexpstate2) => (mulstate1==mulstate2)))
G(((modexpstate1==modexpstate2) => (squarestatenext1==squarestatenext2)))
G(((modexpstate1==modexpstate2) => (bytecounter1==bytecounter2)))
G(((modexpstate1==modexpstate2) => (squarestate1==squarestate2)))
